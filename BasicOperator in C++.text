C++ supports a variety of operators that allow you to perform different operations on variables and values. Here's an overview of some basic operators in C++:

------------------------Arithmetic Operators:------------------------------
+ (Addition)
- (Subtraction)
* (Multiplication)
/ (Division)
% (Modulus - gives the remainder of a division)
--------------------------Example-------------------------
int a = 10, b = 3;
int sum = a + b;     // 13
int difference = a - b;  // 7
int product = a * b;     // 30
int quotient = a / b;    // 3
int remainder = a % b;   // 1

..........................................Relational Operators:..............................

== (Equal to)
!= (Not equal to)
< (Less than)
> (Greater than)
<= (Less than or equal to)
>= (Greater than or equal to)
-----------------------------Example------------------------------------
int x = 5, y = 8;
bool isEqual = (x == y);  // false
bool isNotEqual = (x != y);  // true
bool isLessThan = (x < y);  // true

-----------------------------------------------Logical Operators:---------------------

&& (Logical AND)
|| (Logical OR)
! (Logical NOT)
-----------------------------Example------------------------------------
bool condition1 = true, condition2 = false;
bool resultAnd = condition1 && condition2;  // false
bool resultOr = condition1 || condition2;   // true
bool resultNot = !condition1;               // false

---------------------------------------------Assignment Operators:

= (Assignment)
+= (Add and assign)
-= (Subtract and assign)
*= (Multiply and assign)
/= (Divide and assign)
%= (Modulus and assign)
-----------------------------Example------------------------------------
int num = 10;
num += 5;  // num is now 15  //we can also write 10+5 //number update in each case
num -= 3;  // num is now 12  //we can also write 15-3
num *= 2;  // num is now 24    12*2

------------------------Increment and Decrement Operators:

++ (Increment by 1)
-- (Decrement by 1)
-----------------------------Example------------------------------------
int count = 5;
count++;  // count is now 6
count--;  // count is now 5 again


--------------------------------------XOR---------------------------
In C++, the XOR (exclusive OR) operator is represented by the caret symbol ^. The XOR operator returns true (1) if the operands are different and false (0) if the operands are the same.
 int a = 5;
    int b = 3;

    // Using XOR operator
    int result = a ^ b;
n this example, if a is 5 and b is 3, the XOR operation a ^ b would be 6. This is because 5 in binary is 0101 and 3 in binary is 0011. The XOR of corresponding bits gives 0110, which is 6 in decimal.

Keep in mind that the XOR operator can also be used with boolean values, where it behaves similarlyâ€”returning true if the operands are different and false if the operands are the same.

------------------------------------left Shift (<<) Operator:------------------
The left shift operator shifts the bits of a number to the left by a specified number of positions. It is equivalent to multiplying the number by 2 raised to the power of the shift count.
int main() {
    int num = 5;
    
    // Left shift by 2 positions
    int result = num << 2;  // Equivalent to num * (2^2) or num * 4

    std::cout << "Result of " << num << " left shift by 2 is: " << result << std::endl;

    return 0;
}
 this example, the binary representation of num (5) is shifted to the left by 2 positions, resulting in 5 * (2^2) = 20.

-----------------------Right Shift (>>) Operator:---------------------
The right shift operator shifts the bits of a number to the right by a specified number of positions. It is equivalent to dividing the number by 2 raised to the power of the shift count.
#include <iostream>

int main() {
    int num = 20;
    
    // Right shift by 2 positions
    int result = num >> 2;  // Equivalent to num / (2^2) or num / 4

    std::cout << "Result of " << num << " right shift by 2 is: " << result << std::endl;

    return 0;
}

In this example, the binary representation of num (20) is shifted to the right by 2 positions, resulting in 20 / (2^2) = 5.


